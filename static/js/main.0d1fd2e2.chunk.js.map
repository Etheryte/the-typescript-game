{"version":3,"sources":["components/Editor.tsx","components/Game.tsx","levels/1.tsx","levels/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["USER_PATH","SYSTEM_PATH","props","useState","instance","setInstance","controller","setController","userMarkers","setUserMarkers","isValid","levelState","setLevelState","level","setIsValid","useEffect","editor","getModels","dispose","setModel","languages","typescript","typescriptDefaults","setExtraLibs","content","context","userModel","createModel","text","Uri","parse","systemModel","lodashDebounceChange","debounce","console","log","setValue","getValue","validateText","changeListener","onDidChangeContent","markersListener","onDidChangeMarkers","uris","uri","markers","getModelMarkers","resource","toString","path","getState","cancel","hasMarkers","map","marker","line","startLineNumber","message","join","length","isWarning","className","options","minimap","enabled","contextmenu","lightbulb","folding","showUnused","inlineHints","language","model","automaticLayout","editorWillMount","defaults","baseOptions","getCompilerOptions","strict","noLib","isolatedModules","setCompilerOptions","editorDidMount","monaco","description","levels","level1","App","indexOf","Editor","role","Game","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d1fd2e2.chunk.js","sourcesContent":["import { editor, languages } from \"monaco-editor\";\nimport MonacoEditor, { EditorDidMount, EditorWillMount, monaco } from \"react-monaco-editor\";\nimport { useEffect, useState } from \"react\";\nimport debounce from \"lodash/debounce\";\n\nimport { Level } from \"../levels\";\n\nimport \"./editor.scss\";\n\ntype Monaco = typeof monaco;\ntype Instance = monaco.editor.IStandaloneCodeEditor;\n\ntype Props = {\n  level: Level;\n  setIsValid: (isValid: boolean) => void;\n};\n\nconst USER_PATH = \"inmemory://user\";\nconst SYSTEM_PATH = \"inmemory://system\";\n\nexport default (props: Props) => {\n  const [instance, setInstance] = useState<Instance | null>(null);\n  const [controller, setController] = useState<Monaco | null>(null);\n  const [userMarkers, setUserMarkers] = useState<monaco.editor.IMarker[]>([]);\n  const [levelState, setLevelState] = useState<Partial<ReturnType<typeof props.level.getState>>>({ isValid: false });\n  const level = props.level;\n  const setIsValid = props.setIsValid;\n\n  // When we receive a new level, reset the state\n  useEffect(() => {\n    // If the editor is not ready yet, just ignore and go when it is ready\n    if (!instance || !controller) {\n      return;\n    }\n\n    // Throw away old models\n    for (const model of controller.editor.getModels()) {\n      model.dispose();\n    }\n    instance.setModel(null);\n\n    // Setup for the current level\n    const defaults = controller.languages.typescript.typescriptDefaults;\n    defaults.setExtraLibs([\n      {\n        content: level.context ?? \"\",\n      },\n    ]);\n\n    const userModel = editor.createModel(level.text, \"typescript\", controller.Uri.parse(USER_PATH));\n    const systemModel = editor.createModel(\"\", \"typescript\", controller.Uri.parse(SYSTEM_PATH));\n\n    // Setting the system value on markers isn't enough since we don't get updates when one valid state moves to another a-la copy-paste\n    const lodashDebounceChange = debounce(() => {\n      console.log(\"update system\");\n      // The system model needs to be block scoped off from the user model since we don't use `isolatedModules: true`\n      // Could alternatively do `export default {}` here too\n      systemModel.setValue(`{\n      ;${userModel.getValue()}\n      ;${level.validateText}\n      }`);\n    }, 100);\n    const changeListener = userModel.onDidChangeContent(lodashDebounceChange);\n\n    const markersListener = controller.editor.onDidChangeMarkers((uris) => {\n      for (const uri of uris) {\n        const markers = controller.editor.getModelMarkers({\n          resource: uri,\n        });\n        console.log(\"markers for \" + uri.toString(), markers);\n        const path = uri.toString();\n        if (path === USER_PATH) {\n          setUserMarkers(markers);\n          setIsValid(false);\n        } else if (path === SYSTEM_PATH) {\n          const levelState = level.getState(markers);\n          setLevelState(levelState);\n          setIsValid(levelState.isValid);\n        }\n      }\n    });\n\n    // TODO: If the level text has a selection, highlight it\n    // editor.setSelection(new Selection(5, 16, 5, 19));\n    // TODO: We currently load all languages, perhaps we can remove this?\n\n    // Once everything is ready, set the model\n    instance.setModel(userModel);\n\n    // console.log(controller.editor.getModels());\n\n    return function cleanup() {\n      // Keep hot reload happy\n      for (const model of controller.editor.getModels()) {\n        model.dispose();\n      }\n      instance.setModel(null);\n\n      // Remove lingering listeners from the editor\n      lodashDebounceChange.cancel();\n      changeListener.dispose();\n      markersListener.dispose();\n    };\n  }, [instance, controller, level, setIsValid]);\n\n  const onBeforeMount: EditorWillMount = (controller: Monaco) => {\n    const defaults = controller.languages.typescript.typescriptDefaults;\n    const baseOptions = defaults.getCompilerOptions();\n    const options: languages.typescript.CompilerOptions = {\n      // The compiler breaks in the browser without `allowNonTsExtensions: true` ¯\\_(ツ)_/¯\n      ...baseOptions,\n      strict: true,\n      // Remove default browser interface definitions etc so we don't get a bunch of unrelated things in autocomplete\n      noLib: true,\n      // We can't use these lest we ask the user to export the types\n      isolatedModules: false,\n    };\n    defaults.setCompilerOptions(options);\n  };\n\n  const onMount: EditorDidMount = (instance: Instance, monaco: Monaco) => {\n    setInstance(instance);\n    setController(monaco);\n  };\n\n  const options: monaco.editor.IStandaloneEditorConstructionOptions = {\n    // The default editor has a lot of distractions\n    minimap: {\n      enabled: false,\n    },\n    contextmenu: false,\n    lightbulb: {\n      enabled: false,\n    },\n    folding: false,\n    showUnused: false,\n    inlineHints: {\n      enabled: false,\n    },\n    language: \"typescript\",\n    // We set a model in `onMount()` instead\n    model: null,\n    automaticLayout: true,\n  };\n\n  const readableMarkers = userMarkers\n    .map((marker) => {\n      const line = marker.startLineNumber ? `Problem on line ${marker.startLineNumber}: ` : \"\";\n      return `${line}${marker.message}`;\n    })\n    .join(\" \");\n  const hasMarkers = !!readableMarkers.length;\n  const isValid = !!levelState.isValid;\n\n  const isError = hasMarkers;\n  const isWarning = !isError && !isValid;\n  const isSuccess = !isWarning;\n  const className = isError ? \"is-error\" : isWarning ? `is-warning` : \"is-success\";\n\n  return (\n    <>\n      {/*\n      <pre>Level state {JSON.stringify(levelState)}</pre>\n      */}\n      <div className={`editor-area ${className}`}>\n        <MonacoEditor options={options} editorWillMount={onBeforeMount} editorDidMount={onMount} />\n        {/*\n        <p className={`notification is-error`}>{readableMarkers}</p>\n        <p className={`notification is-warning`}>There are no errors, but the solution isn't quite right...</p>\n        <p className=\"notification is-success\">All good!</p>\n        */}\n      </div>\n    </>\n  );\n};\n","import \"./game.scss\";\n\ntype Props = {\n  isValid: boolean;\n};\n\nexport default (props: Props) => {\n  return (\n    <div className={`game ${props.isValid ? \"is-success\" : \"\"}`}>\n      <div className=\"top-edge\" />\n      <div className=\"clouds-high\" />\n      <div className=\"clouds-low\" />\n      <div className=\"hills\" />\n      <div className=\"ground-top\">\n        <div className=\"character-wrapper\">\n          <div className=\"character\" />\n        </div>\n        <div className=\"obstacle\" />\n      </div>\n      <div className=\"ground-fill\" />\n    </div>\n  );\n};\n","import { monaco } from \"react-monaco-editor\";\n\nexport const description = (\n  <>\n    <p>\n      Welcome to the Typescript Game. Typescript is a programming language that helps you write good code by checking\n      the types of things for you.\n    </p>\n    <p>\n      In Typescript, the broadest type to allow anything is called <code>any</code>.\n    </p>\n    <p>\n      Use the type <code>any</code> to tell the hero to jump over anything in their way!\n    </p>\n  </>\n);\n\nexport const context = ``;\n\nexport const text = `\n/**\n * This is a type definition.\n * Similar to variables, you can assign values to types.\n * This specific type tells the hero what kind of objects to jump over.\n */\ntype JumpOver = `;\n\nexport const validateText = `\n// See https://github.com/microsoft/TypeScript/issues/27024#issuecomment-421529650\ntype Equals<X, Y> =\n    (<T>() => T extends X ? 1 : 2) extends\n    (<T>() => T extends Y ? 1 : 2) ? true : false;\n\nconst validate: Equals<JumpOver, any> = true;`;\n\nexport const getState = (markers: monaco.editor.IMarker[]) => {\n  return {\n    // The level is valid if we have exactly one error and it's that `validate` is unused\n    isValid: markers.length === 1 && markers[0].message === \"'validate' is declared but its value is never read.\",\n  };\n};\n","import * as level1 from \"./1\";\n\n// See https://stackoverflow.com/a/57447842/1470607\ntype ArrayElement<A> = A extends readonly (infer T)[] ? T : never;\n\nconst levels = [level1];\n\nexport type Level = ArrayElement<typeof levels>;\n\nexport default levels;\n","import { useState } from \"react\";\nimport Editor from \"./components/Editor\";\nimport Game from \"./components/Game\";\nimport levels from \"./levels\";\n\nimport \"./app.scss\";\n\nfunction App() {\n  const [level, setLevel] = useState(levels[0]);\n  const [isValid, setIsValid] = useState(false);\n\n  return (\n    <>\n      <section className=\"app-section\">\n        <h1>The Typescript Game</h1>\n        {level.description}\n        <p>\n          Level {levels.indexOf(level) + 1} of {levels.length}.\n        </p>\n        <Editor level={level} setIsValid={setIsValid} />\n      </section>\n      <section className=\"app-section\" role=\"presentation\">\n        <Game isValid={isValid} />\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}